#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ SQLite –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
 */

const Database = require('better-sqlite3');
const path = require('path');
const fs = require('fs');

function optimizeSQLite(dbPath) {
  console.log('üîß Optimizing SQLite database...');
  
  if (!fs.existsSync(dbPath)) {
    console.error(`‚ùå Database file not found: ${dbPath}`);
    return false;
  }
  
  const db = new Database(dbPath);
  
  try {
    // 1. –í–∫–ª—é—á–∞–µ–º WAL —Ä–µ–∂–∏–º –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    console.log('   üìù Enabling WAL mode...');
    db.pragma('journal_mode = WAL');
    
    // 2. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
    console.log('   ‚ö° Setting synchronous mode...');
    db.pragma('synchronous = NORMAL');
    
    // 3. –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫–µ—à–∞
    console.log('   üíæ Increasing cache size...');
    db.pragma('cache_size = 10000'); // 10MB
    
    // 4. –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞–º—è—Ç—å –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
    console.log('   üß† Setting temp store to memory...');
    db.pragma('temp_store = MEMORY');
    
    // 5. –í–∫–ª—é—á–∞–µ–º memory-mapped I/O
    console.log('   üó∫Ô∏è  Enabling memory-mapped I/O...');
    db.pragma('mmap_size = 268435456'); // 256MB
    
    // 6. –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    console.log('   üìÑ Setting page size...');
    db.pragma('page_size = 4096');
    
    // 7. –í–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ—á–∏—Å—Ç–∫—É
    console.log('   üßπ Enabling auto vacuum...');
    db.pragma('auto_vacuum = INCREMENTAL');
    
    // 8. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
    console.log('   üìä Analyzing database...');
    db.exec('ANALYZE');
    
    // 9. –í—ã–ø–æ–ª–Ω—è–µ–º VACUUM –¥–ª—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –º–µ—Å—Ç–∞
    console.log('   üóëÔ∏è  Vacuuming database...');
    db.exec('VACUUM');
    
    // 10. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å
    console.log('   üîç Checking integrity...');
    const integrity = db.pragma('integrity_check');
    if (integrity[0].integrity_check !== 'ok') {
      console.error('‚ùå Database integrity check failed:', integrity);
      return false;
    }
    
    console.log('‚úÖ SQLite optimization completed successfully!');
    return true;
    
  } catch (error) {
    console.error('‚ùå SQLite optimization failed:', error);
    return false;
  } finally {
    db.close();
  }
}

function getDatabaseStats(dbPath) {
  console.log('üìä Database Statistics:');
  
  if (!fs.existsSync(dbPath)) {
    console.error(`‚ùå Database file not found: ${dbPath}`);
    return;
  }
  
  const db = new Database(dbPath);
  
  try {
    // –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
    const stats = fs.statSync(dbPath);
    const fileSizeMB = (stats.size / 1024 / 1024).toFixed(2);
    console.log(`   üìÅ File size: ${fileSizeMB} MB`);
    
    // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∞–±–ª–∏—Ü
    const tables = db.prepare(`
      SELECT name FROM sqlite_master 
      WHERE type='table' AND name NOT LIKE 'sqlite_%'
    `).all();
    console.log(`   üìã Tables: ${tables.length}`);
    
    // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö
    const mainTables = ['users', 'streamers', 'user_gifts', 'avatars', 'gifts'];
    mainTables.forEach(table => {
      try {
        const count = db.prepare(`SELECT COUNT(*) as count FROM ${table}`).get();
        console.log(`   üìä ${table}: ${count.count} records`);
      } catch (error) {
        // –¢–∞–±–ª–∏—Ü–∞ –º–æ–∂–µ—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å
      }
    });
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    console.log('   ‚öôÔ∏è  Database settings:');
    const journalMode = db.pragma('journal_mode');
    console.log(`     Journal mode: ${journalMode[0].journal_mode}`);
    
    const synchronous = db.pragma('synchronous');
    console.log(`     Synchronous: ${synchronous[0].synchronous}`);
    
    const cacheSize = db.pragma('cache_size');
    console.log(`     Cache size: ${cacheSize[0].cache_size} pages`);
    
    const pageSize = db.pragma('page_size');
    console.log(`     Page size: ${pageSize[0].page_size} bytes`);
    
    const autoVacuum = db.pragma('auto_vacuum');
    console.log(`     Auto vacuum: ${autoVacuum[0].auto_vacuum}`);
    
  } catch (error) {
    console.error('‚ùå Failed to get database stats:', error);
  } finally {
    db.close();
  }
}

function createBackup(dbPath, backupPath = null) {
  if (!backupPath) {
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
    backupPath = `${dbPath}.backup.${timestamp}`;
  }
  
  console.log(`üíæ Creating backup: ${backupPath}`);
  
  if (!fs.existsSync(dbPath)) {
    console.error(`‚ùå Database file not found: ${dbPath}`);
    return false;
  }
  
  try {
    // –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
    fs.copyFileSync(dbPath, backupPath);
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    fs.chmodSync(backupPath, 0o600);
    
    const stats = fs.statSync(backupPath);
    const fileSizeMB = (stats.size / 1024 / 1024).toFixed(2);
    
    console.log(`‚úÖ Backup created successfully: ${fileSizeMB} MB`);
    return true;
    
  } catch (error) {
    console.error('‚ùå Backup creation failed:', error);
    return false;
  }
}

function restoreBackup(backupPath, dbPath) {
  console.log(`üîÑ Restoring from backup: ${backupPath}`);
  
  if (!fs.existsSync(backupPath)) {
    console.error(`‚ùå Backup file not found: ${backupPath}`);
    return false;
  }
  
  try {
    // –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Ç–µ–∫—É—â–µ–π –ë–î
    if (fs.existsSync(dbPath)) {
      const currentBackup = `${dbPath}.before-restore.${Date.now()}`;
      fs.copyFileSync(dbPath, currentBackup);
      console.log(`üìã Current database backed up to: ${currentBackup}`);
    }
    
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑ –±—ç–∫–∞–ø–∞
    fs.copyFileSync(backupPath, dbPath);
    fs.chmodSync(dbPath, 0o600);
    
    console.log('‚úÖ Database restored successfully');
    return true;
    
  } catch (error) {
    console.error('‚ùå Database restore failed:', error);
    return false;
  }
}

// CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
if (require.main === module) {
  const command = process.argv[2];
  const dbPath = process.argv[3] || path.join(process.cwd(), 'data.sqlite');
  
  switch (command) {
    case 'optimize':
      const success = optimizeSQLite(dbPath);
      process.exit(success ? 0 : 1);
      break;
      
    case 'stats':
      getDatabaseStats(dbPath);
      break;
      
    case 'backup':
      const backupPath = process.argv[4];
      const backupSuccess = createBackup(dbPath, backupPath);
      process.exit(backupSuccess ? 0 : 1);
      break;
      
    case 'restore':
      const restoreBackupPath = process.argv[4];
      if (!restoreBackupPath) {
        console.error('‚ùå Please provide backup file path');
        process.exit(1);
      }
      const restoreSuccess = restoreBackup(restoreBackupPath, dbPath);
      process.exit(restoreSuccess ? 0 : 1);
      break;
      
    default:
      console.log('üîß SQLite Optimization Tool');
      console.log('');
      console.log('Usage:');
      console.log('  node scripts/optimize-sqlite.js optimize [db_path]');
      console.log('  node scripts/optimize-sqlite.js stats [db_path]');
      console.log('  node scripts/optimize-sqlite.js backup [db_path] [backup_path]');
      console.log('  node scripts/optimize-sqlite.js restore [db_path] [backup_path]');
      console.log('');
      console.log('Examples:');
      console.log('  node scripts/optimize-sqlite.js optimize');
      console.log('  node scripts/optimize-sqlite.js stats');
      console.log('  node scripts/optimize-sqlite.js backup');
      console.log('  node scripts/optimize-sqlite.js restore data.sqlite data.sqlite.backup.2024-01-01');
      break;
  }
}

module.exports = {
  optimizeSQLite,
  getDatabaseStats,
  createBackup,
  restoreBackup
};
