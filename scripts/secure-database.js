#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
 * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª–∞–º –ë–î
 */

const fs = require('fs');
const path = require('path');
const os = require('os');

function secureDatabaseFiles() {
  const dbFiles = [
    'data.sqlite',
    'data.sqlite-shm',
    'data.sqlite-wal'
  ];
  
  const projectRoot = process.cwd();
  
  console.log('üîí Securing database files...');
  
  dbFiles.forEach(file => {
    const filePath = path.join(projectRoot, file);
    
    if (fs.existsSync(filePath)) {
      try {
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ (600)
        // –í–ª–∞–¥–µ–ª–µ—Ü: —á—Ç–µ–Ω–∏–µ –∏ –∑–∞–ø–∏—Å—å
        // –ì—Ä—É–ø–ø–∞ –∏ –¥—Ä—É–≥–∏–µ: –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞
        fs.chmodSync(filePath, 0o600);
        
        console.log(`‚úÖ Secured ${file} (600)`);
      } catch (error) {
        console.error(`‚ùå Failed to secure ${file}:`, error.message);
      }
    } else {
      console.log(`‚ö†Ô∏è  ${file} not found, skipping...`);
    }
  });
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
  console.log('\nüìã Current file permissions:');
  dbFiles.forEach(file => {
    const filePath = path.join(projectRoot, file);
    
    if (fs.existsSync(filePath)) {
      try {
        const stats = fs.statSync(filePath);
        const mode = stats.mode.toString(8).slice(-3);
        console.log(`${file}: ${mode}`);
      } catch (error) {
        console.error(`Failed to check ${file}:`, error.message);
      }
    }
  });
}

function checkDatabaseSecurity() {
  const dbFiles = [
    'data.sqlite',
    'data.sqlite-shm', 
    'data.sqlite-wal'
  ];
  
  const projectRoot = process.cwd();
  let allSecure = true;
  
  console.log('üîç Checking database security...');
  
  dbFiles.forEach(file => {
    const filePath = path.join(projectRoot, file);
    
    if (fs.existsSync(filePath)) {
      try {
        const stats = fs.statSync(filePath);
        const mode = stats.mode.toString(8).slice(-3);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –Ω–µ –±–æ–ª–µ–µ 600
        if (parseInt(mode, 8) > 0o600) {
          console.log(`‚ùå ${file} has insecure permissions: ${mode}`);
          allSecure = false;
        } else {
          console.log(`‚úÖ ${file} is secure: ${mode}`);
        }
      } catch (error) {
        console.error(`Failed to check ${file}:`, error.message);
        allSecure = false;
      }
    }
  });
  
  if (allSecure) {
    console.log('\nüéâ All database files are properly secured!');
  } else {
    console.log('\n‚ö†Ô∏è  Some database files have insecure permissions.');
    console.log('Run this script to fix: node scripts/secure-database.js');
  }
  
  return allSecure;
}

function createSecureBackup() {
  const dbFiles = [
    'data.sqlite',
    'data.sqlite-shm',
    'data.sqlite-wal'
  ];
  
  const projectRoot = process.cwd();
  const backupDir = path.join(projectRoot, 'backups');
  const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
  const backupPath = path.join(backupDir, `backup-${timestamp}`);
  
  console.log('üíæ Creating secure backup...');
  
  try {
    // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –±—ç–∫–∞–ø–æ–≤
    if (!fs.existsSync(backupDir)) {
      fs.mkdirSync(backupDir, { mode: 0o700 });
    }
    
    // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±—ç–∫–∞–ø–∞
    fs.mkdirSync(backupPath, { mode: 0o700 });
    
    // –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –ë–î
    dbFiles.forEach(file => {
      const sourcePath = path.join(projectRoot, file);
      const destPath = path.join(backupPath, file);
      
      if (fs.existsSync(sourcePath)) {
        fs.copyFileSync(sourcePath, destPath);
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        fs.chmodSync(destPath, 0o600);
        console.log(`‚úÖ Backed up ${file}`);
      }
    });
    
    console.log(`üéâ Backup created at: ${backupPath}`);
    console.log('‚ö†Ô∏è  Remember to store backup encryption keys separately!');
    
  } catch (error) {
    console.error('‚ùå Backup failed:', error.message);
  }
}

// CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
if (require.main === module) {
  const command = process.argv[2];
  
  switch (command) {
    case 'secure':
      secureDatabaseFiles();
      break;
    case 'check':
      checkDatabaseSecurity();
      break;
    case 'backup':
      createSecureBackup();
      break;
    default:
      console.log('Database Security Tool');
      console.log('');
      console.log('Usage:');
      console.log('  node scripts/secure-database.js secure  - Set secure file permissions');
      console.log('  node scripts/secure-database.js check   - Check current permissions');
      console.log('  node scripts/secure-database.js backup  - Create secure backup');
      console.log('');
      console.log('Examples:');
      console.log('  node scripts/secure-database.js secure');
      console.log('  node scripts/secure-database.js check');
      break;
  }
}

module.exports = {
  secureDatabaseFiles,
  checkDatabaseSecurity,
  createSecureBackup
};
