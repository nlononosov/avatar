#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
 */

const { db } = require('../db');

function fixTokens() {
  console.log('üîß Fixing problematic tokens...\n');
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const users = db.prepare('SELECT twitch_user_id, access_token, refresh_token FROM users').all();
    console.log(`Found ${users.length} users to check`);
    
    let fixedCount = 0;
    let errorCount = 0;
    
    for (const user of users) {
      try {
        let needsUpdate = false;
        let newAccessToken = user.access_token;
        let newRefreshToken = user.refresh_token;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º access_token
        if (user.access_token) {
          try {
            const { extractToken } = require('../lib/token-encryption');
            const decrypted = extractToken(user.access_token);
            if (decrypted === null && user.access_token.length > 10) {
              // –¢–æ–∫–µ–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω, –æ–±–Ω—É–ª—è–µ–º
              console.log(`Clearing problematic access_token for user ${user.twitch_user_id}`);
              newAccessToken = null;
              needsUpdate = true;
            }
          } catch (error) {
            console.log(`Error checking access_token for user ${user.twitch_user_id}: ${error.message}`);
            newAccessToken = null;
            needsUpdate = true;
          }
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º refresh_token
        if (user.refresh_token) {
          try {
            const { extractToken } = require('../lib/token-encryption');
            const decrypted = extractToken(user.refresh_token);
            if (decrypted === null && user.refresh_token.length > 10) {
              // –¢–æ–∫–µ–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω, –æ–±–Ω—É–ª—è–µ–º
              console.log(`Clearing problematic refresh_token for user ${user.twitch_user_id}`);
              newRefreshToken = null;
              needsUpdate = true;
            }
          } catch (error) {
            console.log(`Error checking refresh_token for user ${user.twitch_user_id}: ${error.message}`);
            newRefreshToken = null;
            needsUpdate = true;
          }
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if (needsUpdate) {
          // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω—ã null, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –≤–º–µ—Å—Ç–æ null
          const finalAccessToken = newAccessToken || '';
          const finalRefreshToken = newRefreshToken || '';
          
          const stmt = db.prepare(`
            UPDATE users 
            SET access_token = ?, refresh_token = ?, updated_at = ?
            WHERE twitch_user_id = ?
          `);
          
          stmt.run(
            finalAccessToken,
            finalRefreshToken,
            Math.floor(Date.now() / 1000),
            user.twitch_user_id
          );
          
          fixedCount++;
          console.log(`‚úÖ Fixed tokens for user ${user.twitch_user_id}`);
        }
        
      } catch (error) {
        errorCount++;
        console.error(`‚ùå Error processing user ${user.twitch_user_id}: ${error.message}`);
      }
    }
    
    // –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä–∏–º–µ—Ä–æ–≤
    console.log('\nüîß Checking streamers...');
    const streamers = db.prepare('SELECT streamer_twitch_id, da_access_token, da_refresh_token FROM streamers').all();
    console.log(`Found ${streamers.length} streamers to check`);
    
    for (const streamer of streamers) {
      try {
        let needsUpdate = false;
        let newAccessToken = streamer.da_access_token;
        let newRefreshToken = streamer.da_refresh_token;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º da_access_token
        if (streamer.da_access_token) {
          try {
            const { extractToken } = require('../lib/token-encryption');
            const decrypted = extractToken(streamer.da_access_token);
            if (decrypted === null && streamer.da_access_token.length > 10) {
              console.log(`Clearing problematic da_access_token for streamer ${streamer.streamer_twitch_id}`);
              newAccessToken = null;
              needsUpdate = true;
            }
          } catch (error) {
            console.log(`Error checking da_access_token for streamer ${streamer.streamer_twitch_id}: ${error.message}`);
            newAccessToken = null;
            needsUpdate = true;
          }
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º da_refresh_token
        if (streamer.da_refresh_token) {
          try {
            const { extractToken } = require('../lib/token-encryption');
            const decrypted = extractToken(streamer.da_refresh_token);
            if (decrypted === null && streamer.da_refresh_token.length > 10) {
              console.log(`Clearing problematic da_refresh_token for streamer ${streamer.streamer_twitch_id}`);
              newRefreshToken = null;
              needsUpdate = true;
            }
          } catch (error) {
            console.log(`Error checking da_refresh_token for streamer ${streamer.streamer_twitch_id}: ${error.message}`);
            newRefreshToken = null;
            needsUpdate = true;
          }
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if (needsUpdate) {
          // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω—ã null, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –≤–º–µ—Å—Ç–æ null
          const finalAccessToken = newAccessToken || '';
          const finalRefreshToken = newRefreshToken || '';
          
          const stmt = db.prepare(`
            UPDATE streamers 
            SET da_access_token = ?, da_refresh_token = ?, updated_at = ?
            WHERE streamer_twitch_id = ?
          `);
          
          stmt.run(
            finalAccessToken,
            finalRefreshToken,
            Math.floor(Date.now() / 1000),
            streamer.streamer_twitch_id
          );
          
          fixedCount++;
          console.log(`‚úÖ Fixed tokens for streamer ${streamer.streamer_twitch_id}`);
        }
        
      } catch (error) {
        errorCount++;
        console.error(`‚ùå Error processing streamer ${streamer.streamer_twitch_id}: ${error.message}`);
      }
    }
    
    console.log(`\nüéâ Token fix completed!`);
    console.log(`   Fixed: ${fixedCount} records`);
    console.log(`   Errors: ${errorCount} records`);
    
    if (fixedCount > 0) {
      console.log(`\n‚ö†Ô∏è  Note: Users with cleared tokens will need to re-authorize`);
    }
    
  } catch (error) {
    console.error('‚ùå Token fix failed:', error);
  }
}

if (require.main === module) {
  fixTokens();
}

module.exports = { fixTokens };
